# encoding: UTF-8
require 'nokogiri'
require 'open-uri'
#require 'rdf' #added this as an experiment to try to solve Dlibhydra problems
#require 'curation_concerns' #makes no difference
require 'dlibhydra'
require 'csv'

class FoxmlReader
include ::Dlibhydra
include ::CurationConcerns
include ::Hydra


=begin
*list of possible collections under theses is quite extensive - get it from an risearch query
*thesescollections.txt contains all the returned data from risearch for all levels
*thesescollectionsLevel2|3.txt is a complete cleaned up list of level 2|3 collections ready for use. ~NO IT ISNT. IS ONLY PARTIAL
*format is: old pid of collection,title of collection,old parent_pid
*col_mapping.txt is output by the script and is the permanent mapping file. format:
originalpid, title, newid . seems to make sense
=end

def make_collection_structure
puts "running make_collection_structure"

#make the top Theses level first, with a CurationConcerns (not dlibhydra) model.
#array of lines including title
topmapping = []
#we also need a pid:id hash so we can extract id via a pid key
idmap ={}
toppid = "york:18179"    #top level collection
topcol = Object::Collection.new
topcol.title = ["Masters dissertations"]
topcol.permissions = [Hydra::AccessControls::Permission.new({:name=> "public", :type=>"group", :access=>"read"}), Hydra::AccessControls::Permission.new({:name=>"ps552@york.ac.uk", :type=> "person", :access => "edit"})]
topcol.depositor = "ps552@york.ac.uk"
topcol.save!
topcol_id = topcol.id.to_s
puts "topcol.id was " +topcol.id
mappings_string = toppid + "," +  + topcol.title[0].to_s + "," + topcol_id 
	topmapping.push(mappings_string) 
#write to file as  permanent mapping that we can use when mapping theses against collections 
open("/vagrant/files_to_test/col_mapping.txt", "a+")do |mapfile|
	mapfile.puts(topmapping)
end

=begin
now we need to read from the list which I will create, splitting into appropriate parts and for each create an id and add it to the top level collection
=end
#hardcode second level file, but could pass in as param
#csv_text = File.read("/vagrant/files_to_test/thesescollectionsLevel2SMALL.txt")
csv_text = File.read("/vagrant/files_to_test/thesescollectionsLevel2.txt")
csv = CSV.parse(csv_text)
#we also need a file we can write to, as a permanent mapping
mappings_level2 = []

puts "starting second level(subjects)"
csv.each do |line|
    puts line[0]
	col = Object::Collection.new
	#col = Dlibhydra::Collection.new
	col.title = [line[1]]
	col.permissions = [Hydra::AccessControls::Permission.new({:name=> "public", :type=>"group", :access=>"read"}), Hydra::AccessControls::Permission.new({:name=>"ps552@york.ac.uk", :type=> "person", :access => "edit"})]
	col.depositor = "ps552@york.ac.uk"
	col.save!
	col_id = col.id.to_s
	puts "subject col id was" + col_id
	topcol.members << col
	topcol.save!
	mappings_string = line[0] + "," +  + line[1] + "," + col_id 
	mappings_level2.push(mappings_string)
	#add to hash, old pid as key, new id as value
	key = line[0]	
	idmap[key] = col.id
end

#write to file as  permanent mapping that we can use when mapping theses against collections 
open("/vagrant/files_to_test/col_mapping.txt", "a+")do |mapfile|
	mapfile.puts(mappings_level2)
end

#but we still have our mappings array, so  now use this to make third level collections
#best make a small list first

#centre for medievaL STUDDIES 
#york:806625  1969
#york:803772 1971
#MANAGEMENT
#york:795992 2009/2010
#york:795676 2010/2011

sleep 5 # wait 5 seconds before moving on to allow 2nd level collections some time to index before the level3s start trying to find them

#read in third level file
mappings_level3 = []
#csv_text3 = File.read("/vagrant/files_to_test/thesescollectionsLevel3SMALL.txt")
csv_text3 = File.read("/vagrant/files_to_test/thesescollectionsLevel3.txt")
csv_level3 = CSV.parse(csv_text3)
yearpidcount = 1
puts "starting third level (years)"
csv_level3.each do |line|
yearpidcount = yearpidcount +1
    puts "starting number " +yearpidcount.to_s+ " in list"
    puts line[0]
	year_col = Object::Collection.new
	puts "started new year collection"
	#col = Dlibhydra::Collection.new extend cc collection instead
	year_col_title = line[1].to_s
	puts "got level 3 title which was " +year_col_title
	year_col.title =  [year_col_title]
	year_col.permissions = [Hydra::AccessControls::Permission.new({:name=> "public", :type=>"group", :access=>"read"}), Hydra::AccessControls::Permission.new({:name=>"ps552@york.ac.uk", :type=> "person", :access => "edit"})]
	year_col.depositor = "ps552@york.ac.uk"
	puts "saved permissions and depositor for year collection"
	year_col.save!
	puts "saved collection"
	year_col_id = year_col.id.to_s
	puts "year col id was " + year_col_id
	##need to find the right parent collection here	
	parent_pid = line[2]# old parent pid, key to find new parent id
	puts " subject col pid was " + parent_pid
	mapped_parent_id = idmap[parent_pid]	
	puts "mapped parent id was " + mapped_parent_id
	parent = Object::Collection.find(mapped_parent_id)
	parent.members << year_col
	puts "parent id was" + parent.id.to_s
	puts "year collection id was" + year_col.id.to_s
	parent.save!
	puts "parent.members were" + parent.members.to_s
	mappings_string = line[0] + "," +  + line[1] + "," + year_col_id 
	mappings_level3.push(mappings_string)
end

#and write to permanent mapping file - these can be all the same whether level 2 or 3 or  1
#but test first with different
open("/vagrant/files_to_test/col_mapping.txt", "a+")do |mapfile|
#open("/vagrant/files_to_test/col_mapping_lev3.txt", "a+")do |mapfile|
	mapfile.puts(mappings_level3)
end

puts "done"
=begin
#information we need for each collection is the old pid as a key, plus its parent pid, plus the collection name and the new id once it is created
top level will be the top level theses ie current Masters Dissertations (york:18179). 
second level  is discipline eg Archaeology, Education etc
OPTIONAL third level is year eg 1973. Not all disciplines have this level
=end

end  #of method


def make_collection
#coll = Object::Collection.new
coll = Object::Collection.new
#coll.preflabel = "stuff I made"
coll.permissions = [Hydra::AccessControls::Permission.new({:name=> "public", :type=>"group", :access=>"read"}), Hydra::AccessControls::Permission.new({:name=>"ps552@york.ac.uk", :type=> "person", :access => "edit"})]
coll.depositor = "ps552@york.ac.uk"
coll.title = ["a collection made by ruby"]
#coll.preflabel = coll.title[0]  # doesnt work because models now require a preflabel but generic collection model doesnt have one. sure we can get round this but requires extra edits - see if were actually going to use preflabel before doing this!

coll.save!
id = coll.id
puts "collection id was " +id
end



def test_pdf_upload
#make basic cc thesis
	#vt = CurationConcerns::Thesis.create
	vt = CurationConcerns::DlibThesis.create	
	vt.title = ["and a fourth CC vanilla thesis"]
	vt.preflabel = vt.title[0]   #no preflabel in vanilla CurationConcerns
	vt.permissions = [Hydra::AccessControls::Permission.new({:name=> "public", :type=>"group", :access=>"read"}), Hydra::AccessControls::Permission.new({:name=>"ps552@york.ac.uk", :type=> "person", :access => "edit"})]
	vt.depositor = "ps552@york.ac.uk"
	vt.save!
puts "done"
#now try to upload a content file into a Dlibhydra fileset
	contentfile = open("/vagrant/files_to_test/testpdf.pdf")
	users = Object::User.all #otherwise it will use one of the included modules
	user = users[0]	
	vfset = FileSet.new
	#vfset = CcMigrate::MainFileSet.new   #SystemStackError: stack level too deep
	vfset.title = ["main pdf content"]
	#vfset.preflabel = "main pdf content"
	actor = CurationConcerns::Actors::FileSetActor.new(vfset, user)
puts "OK SO FAR"
actor.create_content(contentfile, relation = 'main_file' )
actor.create_metadata(vt, file_set_params = {files: [contentfile],
                                          title: ['test title'],
                                          visibility: 'public'})
puts "still ok"	
vfset.save!
vt.save!
puts "done"
end


#this is defined in yaml
#return standard term from approved authority list
def get_qualification_level_term(searchterm)
puts "in get_qualification_level_term parameter was "+searchterm
masters = ['Masters','masters']
bachelors = ['Bachelors','Bachelor','Batchelors', 'Batchelor']
diplomas = ['Diploma','(Dip', '(Dip', 'Diploma (Dip)']
doctoral = ['Phd','Doctor of Philosophy (PhD)']
standardterm="unfound"
if masters.include? searchterm
	standardterm = 'Masters (Postgraduate)'
elsif bachelors.include? searchterm
	standardterm = 'Bachelors (Undergraduate)'
elsif diplomas.include? searchterm
	standardterm = 'Diplomas (Postgraduate)' #my guess
elsif doctoral.include? searchterm
    standardterm = 'Doctoral (Postgraduate)'	
end
if standardterm != "unfound"
	#pass the id, get back the term. in this case both are currently identical
	auth = Qa::Authorities::Local::FileBasedAuthority.new('qualification_levels')
	approvedterm = auth.find(standardterm)['term']
else 
	approvedterm = "unfound"
end
return approvedterm
end #end get_qualification_level_term

#this returns the  id of an value from  an authority list where each value is stored as a fedora object
#the parameters should be one of the authority types with a relevant class listed in Dlibhydra::Terms and the preflabel is the exact preflabel for the value (eg "University of York. Department of Philosophy") 
def get_resource_id(authority_type, preflabel)
id="unfound"
preflabel = preflabel.to_s
	if authority_type == "department"
		service = Dlibhydra::Terms::DepartmentTerms.new		 
	elsif authority_type == "qualification_name"
	    service = Dlibhydra::Terms::QualificationNameTerms.new
	elsif authority_type == "institution"  #not sure about this since we only have two? york and oxford brookes?
		service = Dlibhydra::Terms::CurrentOrganisationTerms.new
	elsif authority_type == "subject"   #not yet implemented
	    service = Dlibhydra::Terms::SubjectTerms.new 
	elsif authority_type == "person_name"   #no pcurrent_person objects yet created
	    service = Dlibhydra::Terms::CurrentPersonTerms.new
	end
	id = service.find_id(preflabel)
end

#this returns the  correct preflabels to be used when calling get_resource_id to get the object ref for the department
#note there may be more than one! hence the array - test for length
#its a separate method as multiple variants map to the same preflabel/object. 'loc' is the  
def get_department_preflabel(stringtomatch)
preflabels=[]
=begin
Full list of preflabels at https://github.com/digital-york/dlibingest/blob/new_works/lib/assets/lists/departments.csv

and here is the equivalent list of dc:publisher from risearch (GET all values of dc:publisher for objects with type Theses  (make sure to tick Force Distinct")
select  $dept
 from <#ri>
 where $object <dc:type> 'Theses' 
and $object <dc:publisher> $dept)

note the variants - hence need to reduce the search strings to minimum and decapitalise
 
University of York. Dept. of History of Art
University of York. Dept. of Chemistry
University of York. Institute of Advanced Architectural Studies
Institute of Advanced Architectural Studies
University of York. York Management School
University of York. Dept. of Management Studies
University of York. Centre for Medieval Studies
University of York. Dept. of History
University of York. Dept. of Sociology
University of York. Dept. of Education
University of York. Dept. of Economics and Related Studies
University of York. Dept. of Music.
University of York. Dept. of Archaeology
University of York. Dept. of Biology
University of York. Dept. of Health Sciences
University of York. Dept. of English and Related Literature
University of York. Dept. of Language and Linguistic Science
University of York. Dept. of Politics
University of York. Dept. of Philosophy
University of York. Dept. of Social Policy and Social Work
"York Management School (York, England)"
University of York. Institute of Advanced Architectural Studies.
University of York. Centre for Conservation Studies
University of York. Department of Archaeology
University of York. Dept of Archaeology
niversity of York. Dept. of Archaeology
University of York: Dept. of Archaeology
University of York. Post-war Reconstruction and Development Unit
University of York. York Management School.
University of York. Centre for Medieval Studies.
University of York. The York Management School.
The University of York. York Management School.
University of York. York Management School'
University of York. Dept.of History of Art
University of York. Dept. of History of Art.
University of York. Dept of History of Art
University of York. Departments of English and History of Art
University of York. Centre for Eighteenth Century Studies
Oxford Brookes University    									#this is an awarding institution not a dept

=end
	loc = stringtomatch.downcase  #get ride of case inconsistencies
	if loc.include? "reconstruction"
		preflabels.push("University of York. Post-war Reconstruction and Development Unit") 
	elsif loc.include? "advanced architectural"
	    preflabels.push("University of York. Institute of Advanced Architectural Studies")
	elsif loc.include? "medieval"
	    preflabels.push("University of York. Centre for Medieval Studies")
	elsif loc.include? "history of art"
	    preflabels.push("University of York. Department of History of Art") 
	elsif loc.include? "conservation"
	    preflabels.push("University of York. Centre for Conservation Studies")
	elsif loc.include? "eighteenth century"
	    preflabels.push("University of York. Centre for Eighteenth Century Studies")
	elsif loc.include? "chemistry"
	    preflabels.push("University of York. Department of Chemistry")
	elsif loc.include? "history"   #ok because of order
	    preflabels.push("University of York. Department of History")
	elsif loc.include? "sociology"
	    preflabels.push( "University of York. Department of Sociology")
	elsif loc.include? "education"
	    preflabels.push("University of York. Department of Education")
	elsif loc.include? "economics and related"
	    preflabels.push( "University of York. Department of Economics and Related Studies")
	elsif loc.include? "music"
	    preflabels.push( "University of York. Department of Music")
	elsif loc.include? "archaeology"
	    preflabels.push( "University of York. Department of Archaeology")
	elsif loc.include? "biology"
	    preflabels.push( "University of York. Department of Biology")
	elsif loc.include? "english and related literature"
	    preflabels.push( "University of York. Department of English and Related Literature")
	elsif loc.include? "health sciences"
	    preflabels.push( "University of York. Department of Health Sciences")
	elsif loc.include? "politics"
	    preflabels.push("University of York. Department of Politics")
	elsif loc.include? "philosophy"
	    preflabels.push( "University of York. Department of Philosophy")
	elsif loc.include? "social policy and social work"
	    preflabels.push( "University of York. Department of Social Policy and Social Work")
	elsif loc.include? "management"
	    preflabels.push( "University of York. The York Management School")
	elsif loc.include? "language and linguistic science"
	    preflabels.push("University of York. Department of Language and Linguistic Science")
	elsif loc.include? "departments of english and history of art"   #damn! two departments to return!
	    preflabels.push( "University of York. Department of Department of English and Related Literature")
		preflabels.push("University of York. Department of Department of Language and Linguistic Science")
	end
	return preflabels
end

#this returns the  correct preflabel to be used when calling get_resource_id to get the object ref for the degree
#its a separate method as multiple variants map to the same preflabel/object. it really can only have one return - anything else would be nonsense. its going to be quite complex as some cross checking accross the various types may be  needed
#type_array will be an array consisting of all the types for an object!
def get_qualification_name_preflabel(type_array)

#Arrays of qualification name variants
artMasters = ['Master of Arts (MA)', 'Master of Arts', 'Master of Art (MA)', 'MA (Master of Arts)','Masters of Arts (MA)', 'MA']
artBachelors = ['Batchelor of Arts (BA)', '"Bachelor of Arts (BA),"', 'BA', 'Bachelor of Arts (BA)']
artsByResearch = ['Master of Arts by research (MRes)', '"Master of Arts, by research (MRes)"' ]
scienceByResearch = ['Master of Science by research (MRes)', '"Master of Science, by research (MRes)"' ]
scienceBachelors = ['Batchelor of science (BSc)', '"Bachelor of Science (BSc),"', 'BSc', ]
scienceMasters = ['Master of Science (MSc.)', '"Master of Science (MSc),"',"'Master of Science (MSc)",'Master of Science (MSc)','MSc', ]
philosophyBachelors = ['Bachelor of Philosophy (BPhil)', 'BPhil']
philosophyMasters = ['Master of Philosophy (MPhil)','MPhil']
researchMasters = ['Master of Research (Mres)','Master of Research (MRes)','Mres','MRes']#this is the only problematic one
#the variant single quote character in  Conservation Studies is invalid and causes invalid multibyte char (UTF-8) error so  handled this in nokogiri open document call. however we also need to ensure the resulting string is included in the lookup array so the match will still be found. this means recreating it and inserting it into the array
not_valid = "Postgraduate Diploma in â€˜Conservation Studiesâ€™ (PGDip)"
valid_now = not_valid.encode('UTF-8', :invalid => :replace, :undef => :replace)
pgDiplomas = ['Diploma in Conservation Studies', 'Postgraduate Diploma in Conservation Studies ( PGDip)','Postgraduate Diploma in Conservation Studies(PGDip)', 'Postgraduate Diploma in Medieval Studies (PGDip)','PGDip', 'Diploma','(Dip', '(Dip', 'Diploma (Dip)', valid_now] 


qualification_name_preflabel = "unfound" #initial value
#by testing all we should find one of those below
type_array.each do |t|	    #loop1
	type_to_test = t.to_s
	
	#outer loop tests for creation of qualification_name_preflabel
	if qualification_name_preflabel == "unfound"   #loop2
		if artMasters.include? type_to_test #loop2a
		 qualification_name_preflabel = "Master of Arts (MA)"		 
		elsif artBachelors.include? type_to_test
		 qualification_name_preflabel = "Bachelor of Arts (BA)"		 
		elsif artsByResearch.include? type_to_test
		 qualification_name_preflabel = "Master of Arts by Research (MRes)"		 
		elsif scienceBachelors.include? type_to_test
		 qualification_name_preflabel = "Bachelor of Science (BSc)"		 
		elsif scienceMasters.include? type_to_test
		 qualification_name_preflabel = "Master of Science (MSc)"		 
		elsif scienceByResearch.include? type_to_test
		 qualification_name_preflabel = "Master of Science by Research (MRes)"		 
	    elsif philosophyBachelors.include? type_to_test
		 qualification_name_preflabel = "Bachelor of Philosophy (BPhil)"		 
		elsif philosophyMasters.include? type_to_test
		 qualification_name_preflabel = "Master of Philosophy (MPhil)"		
		elsif pgDiplomas.include? type_to_test
		 qualification_name_preflabel = "Postgraduate Diploma (PGDip)"		 
		end #end loop2a
	end #end loop2
		
	#not found? check for plain research masters without arts or science specified (order of testing here is crucial)
		if qualification_name_preflabel == "unfound"    #loop3
		puts "loop3 looking for qualification name"
			if researchMasters.include? type_to_test #loop 4 not done with main list as "MRes" may be listed as separate type as well as a more specific type
				qualification_name_preflabel = "Master of Research (MRes)"
			end#end loop 4
		end   #'end loop 3
	end #end loop1	
	return qualification_name_preflabel
end  #this is where the get_qualification_name_preflabel method should end

def get_standard_language(searchterm)
	s = searchterm.titleize
	auth = Qa::Authorities::Local::FileBasedAuthority.new('languages')
	approved_language = auth.search(s)[0]['id']
end

#will need to expand this for other collections, but not Theses, as all have smae rights
def get_standard_rights(searchterm)
if searchterm.include?("yorkrestricted")
  term = 'York Restricted'
end
	auth = Qa::Authorities::Local::FileBasedAuthority.new('licenses') 
	rights = auth.search(term)[0]['id']
end



def testme
#new collection(extending dlibhydra but including CurationConcerns::WorkBehaviour) id t722h880z

puts "starting test of migration scripts"
t= Object::Thesis.create
mfset = Object::FileSet.new  
t.title = ["Adding a department"]
t.former_id = ["york:123456"]
t.creator_string = ["Alan Bastaard"]
t.abstract = ["as an id from the authorities list"]
t.date_of_award = "2017"
t.advisor = ["pub landlord"]


ds = Dlibhydra::Terms::DepartmentTerms.new
dept_id = ds.find_id("department","University of York. Department of Philosophy") #hard coded for test only. Must be exact!!!
 t.department_resource_ids = [dept_id]
 puts "found dept resource id " + dept_id
# t.awarding_institution # LOOKUP!
# t.qualification_name # LOOKUP!
# t.qualification_level # LOOKUP!
# t.subject # LOOKUP!
#t.language=["pirate english"]
t.keyword = ["sprouts"]
t.rights_holder = ["Alan Bastaard"]
t.rights = ["http://dlib.york.ac.uk/licences#yorkrestricted"] #NOW MULTIVALUED

t.permissions = [Hydra::AccessControls::Permission.new({:name=> "public", :type=>"group", :access=>"read"}), Hydra::AccessControls::Permission.new({:name=>"ps552@york.ac.uk", :type=> "person", :access => "edit"})]
	t.depositor = "ps552@york.ac.uk"	
	#save	
	t.save!	
	id = t.id
	puts "thesis id was " +id 
	#col = Object::Collection.find("gb19f580q")  #see line 901 in this file
	#puts "id of col was:" +col.id
	#puts "got collection ok " + col.title[0].to_s
	#col.members << t  
	#col.save!
	
	
=begin
	users = Object::User.all 
	user = users[0]	
	mfset.title = ["THESIS_MAIN"]
	mfset.permissions = [Hydra::AccessControls::Permission.new({:name=> "public", :type=>"group", :access=>"read"}), Hydra::AccessControls::Permission.new({:name=>"ps552@york.ac.uk", :type=> "person", :access => "edit"})]
	mfset.depositor = "ps552@york.ac.uk"
	mfset.save!	
	
	testpdfloc = "/vagrant/files_to_test/testpdf.pdf"
	if !File.exist?(testpdfloc)
		puts 'content file ' + testpdfloc.to_s + ' not found'	
		return
	else
		puts 'checked for ' + testpdfloc.to_s + ' found it present'
	end  
	contentfile = open("/vagrant/files_to_test/testpdf.pdf")
	actor = CurationConcerns::Actors::FileSetActor.new(mfset, user)
	actor.create_metadata(t)
	puts "created metadata" 
	actor.create_content(contentfile, relation = 'original_file' )
	puts "created content"
	mfset.save!
    t.mainfile << mfset
=end
	puts "done test (without filesets or content). should have department now"

end 



#bundle exec rake migrate_thesis[/vagrant/files_to_test/york_847953.xml,9s1616164]
# bundle exec rake migrate_thesis[/vagrant/files_to_test/york_21031.xml,9s1616164]
#def migrate_thesis(path,collection)
#bundle exec rake migrate_thesis[/vagrant/files_to_test/york_21031.xml,/vagrant/files_to_test/col_mapping.txt]
#emotional world etc
#bundle exec rake migrate_thesis[/vagrant/files_to_test/york_807119.xml,/vagrant/files_to_test/col_mapping.txt]   (the whole collects bundle needs recreation, col mapping txt includes empty year collections)
#bundle exec rake migration_tasks:migrate_thesis[/vagrant/files_to_test/york_847953.xml,/vagrant/files_to_test/col_mapping.txt]
def migrate_thesis(path,collection_mapping_doc_path)
#mfset = Dlibhydra::FileSet.new   #FILESET. #defin this at top because otherwise expects to find it in CurationConcerns module 
mfset = Object::FileSet.new   #FILESET. #define this at top because otherwise expects to find it in CurationConcerns module . 

puts "migrating a thesis"	
	foxmlpath = path
	#parentcol = collection
	
	#enforce  UTF-8 compliance when opening foxml file
	doc = File.open(path){ |f| Nokogiri::XML(f, Encoding::UTF_8.to_s)}
	#doesnt resolve nested namespaces, this fixes that
    ns = doc.collect_namespaces	
	
	#establish parent collection - map old to new from mappings file
	collection_mappings = {}
	mapping_text = File.read(collection_mapping_doc_path)
	csv = CSV.parse(mapping_text)
	csv.each do |line|    
		old_id = line[0]
		new_id = line[2]		
		collection_mappings[old_id] = new_id
	end
	
	
	#now see if the collection mapping is in here
	#make sure we have current rels-ext version
	rels_nums = doc.xpath("//foxml:datastream[@ID='RELS-EXT']/foxml:datastreamVersion/@ID",ns)	
	rels_all = all = rels_nums.to_s
	current_rels = rels_all.rpartition('.').last 
	rels_current_version = 'RELS-EXT.' + current_rels
	untrimmed_former_parent_pid  = doc.xpath("//foxml:datastream[@ID='RELS-EXT']/foxml:datastreamVersion[@ID='#{rels_current_version}']/foxml:xmlContent/rdf:RDF/rdf:Description/rel:isMemberOf/@rdf:resource",ns).to_s	
	#remove unwanted bits 
	former_parent_pid = untrimmed_former_parent_pid.sub 'info:fedora/york', 'york'
	parentcol = collection_mappings[former_parent_pid]
	#find max dc version
	nums = doc.xpath("//foxml:datastream[@ID='DC']/foxml:datastreamVersion/@ID",ns)	
	all = nums.to_s
	current = all.rpartition('.').last 
	currentVersion = 'DC.' + current
	#find the max THESIS_MAIN version
	thesis_nums = doc.xpath("//foxml:datastream[@ID='THESIS_MAIN']/foxml:datastreamVersion/@ID",ns)	
	thesis_all = thesis_nums.to_s
	thesis_current = thesis_all.rpartition('.').last 
	currentThesisVersion = 'THESIS_MAIN.' + thesis_current
	#GET CONTENT - get the location of the pdf as a string
	pdf_loc = doc.xpath("//foxml:datastream[@ID='THESIS_MAIN']/foxml:datastreamVersion[@ID='#{currentThesisVersion}']/foxml:contentLocation/@REF",ns).to_s	
	
	
	#this has local.fedora.host, which will be wrong. need to replace this 
	#reads http://local.fedora.server/digilibImages/HOA/current/X/20150204/xforms_upload_whatever.tmp.pdf
	#needs to read (for development purposes on real machine) http://yodlapp3.york.ac.uk/digilibImages/HOA/current/X/20150204/xforms_upload_4whatever.tmp.pdf
	newpdfloc = pdf_loc.sub 'local.fedora.server', 'yodlapp3.york.ac.uk'
	localpdfloc = pdf_loc.sub 'http://local.fedora.server', '/vagrant/files_to_test'
	
	#dont continue to migrate file if content file not found
	if !File.exist?(localpdfloc)
		puts 'content file ' + localpdfloc.to_s + ' not found'	
		return
	else
		puts 'checked for ' + localpdfloc.to_s + ' found it present'
	end  
	
	
	#for initial development purposes on my machine) http://yodlapp3.york.ac.uk/digilibImages/HOA/current/X/20150204/xforms_upload_4whatever.tmp.pdf
	puts "edited pdf loc is :" + newpdfloc
	#create a new thesis implementing the dlibhydra models
	thesis = Object::Thesis.create
	#start reading and populating  data
	titleArray =  doc.xpath("//foxml:datastream[@ID='DC']/foxml:datastreamVersion[@ID='#{currentVersion}']/foxml:xmlContent/oai_dc:dc/dc:title/text()",ns).to_s
	t = titleArray.to_s   #CHOSS - construct title!
	thesis.title = [t]	#1 only	
	#thesis.preflabel =  thesis.title[0] # skos preferred lexical label (which in this case is same as the title. 1 0nly but can be at same time as title 
	former_id = doc.xpath("//foxml:datastream[@ID='DC']/foxml:datastreamVersion[@ID='#{currentVersion}']/foxml:xmlContent/oai_dc:dc/dc:identifier/text()",ns).to_s
	if former_id.length > 0
	thesis.former_id = [former_id]
	end
	
	 creatorArray = doc.xpath("//foxml:datastream[@ID='DC']/foxml:datastreamVersion[@ID='#{currentVersion}']/foxml:xmlContent/oai_dc:dc/dc:creator/text()",ns).to_s
	 thesis.creator_string = [creatorArray.to_s]
	
	#abstract is currently the description. optional field so test presence
	thesis_abstract = doc.xpath("//foxml:datastream[@ID='DC']/foxml:datastreamVersion[@ID='#{currentVersion}']/foxml:xmlContent/oai_dc:dc/dc:description/text()",ns).to_s
	if thesis_abstract.length > 0
	thesis.abstract = [thesis_abstract] #now multivalued
	end
	
	#date_of_award (dateAccepted in the dc created by the model) 1 only
	thesis_date = doc.xpath("//foxml:datastream[@ID='DC']/foxml:datastreamVersion[@ID='#{currentVersion}']/foxml:xmlContent/oai_dc:dc/dc:date/text()",ns).to_s
	thesis.date_of_award = thesis_date
	
	#advisor 0... 1 so check if present
	thesis_advisor = []
		doc.xpath("//foxml:datastream[@ID='DC']/foxml:datastreamVersion[@ID='#{currentVersion}']/foxml:xmlContent/oai_dc:dc/dc:contributor/text()",ns).each do |i|
		thesis_advisor.push(i.to_s)
	end
	thesis_advisor.each do |c|
		thesis.advisor.push(c)
	end	

   #departments and institutions 
   locations = []
	 doc.xpath("//foxml:datastream[@ID='DC']/foxml:datastreamVersion[@ID='#{currentVersion}']/foxml:xmlContent/oai_dc:dc/dc:publisher/text()",ns).each  do |i|
	 locations.push(i.to_s)
	 end
	 inst_preflabels = []
	 locations.each do |loc|
		#awarding institution id (just check preflabel here as few options)
		if loc.include? "University of York"
			inst_preflabels.push("University of York")
		elsif loc.include? "York." 
			inst_preflabels.push("University of York")
		elsif loc.include? "York:"
			inst_preflabels.push("University of York")
		elsif loc.include? "Oxford Brookes University"
			puts "we need to decide what to do about this"
				#thesis.awarding_institution = "Oxford Brookes University"
		end
		inst_preflabels.each do | preflabel|
			id = get_resource_id('institution', preflabel)
			thesis.awarding_institution_resource_ids.push(id)
		end
				
		#department
		dept_preflabels = get_department_preflabel(loc)		 
		if dept_preflabels.empty?
			puts "no department found"
		end
		dept_preflabels.each do | preflabel|
		puts "at line 627 dep_preflabel was " + preflabel
			id = get_resource_id('department', preflabel)
			puts "at line 629 resource_id was " + id
			thesis.department_resource_ids +=[id]
		end
	end
	
	
	#qualification level, name, resource type
	typesToParse = []  #
	doc.xpath("//foxml:datastream[@ID='DC']/foxml:datastreamVersion[@ID='#{currentVersion}']/foxml:xmlContent/oai_dc:dc/dc:type/text()",ns).each do |t|	
	typesToParse.push(t)
	end
	qualification_name_preflabel = get_qualification_name_preflabel(typesToParse)
	if qualification_name_preflabel != "unfound"  #testing for null 
		qname_id = get_resource_id('qualification_name',qualification_name_preflabel)
		if qname_id.to_s != "unfound"		
			thesis.qualification_name_resource_ids+=[qname_id]
		else
			puts "no qualification nameid found"
		end
	else
		puts "no qualification name preflabel found"
	end	
	
	#qualification levels (yml file). there can only be one
	typesToParse.each do |t|	
	type_to_test = t.to_s
	degree_level = get_qualification_level_term(type_to_test)
	if degree_level != "unfound"
		thesis.qualification_level += [degree_level]
	end

	#now check for certain award types, and if found map to subjects (dc:subject not dc:11 subject)
	#resource Types map to dc:subject. at present the only official value is Dissertations, Academic
	theses = [ 'theses','Theses','Dissertations','dissertations' ] 
	if theses.include? type_to_test	
	#not using methods below yet - or are we? subjects[] no longer in model
		subject_id = get_resource_id('subject',"Dissertations, Academic")
		 #thesis.subject_resource_ids =["Dissertations, Academic"]
		 puts "at line 674 subject_id was" + subject_id
		thesis.subject_resource_ids =[subject_id]		 
		borkit
	end
end	
	
	thesis_language = []
	doc.xpath("//foxml:datastream[@ID='DC']/foxml:datastreamVersion[@ID='#{currentVersion}']/foxml:xmlContent/oai_dc:dc/dc:language/text()",ns).each do |lan|
	thesis_language.push(lan.to_s)
	end
	#this should return the key as that allows us to just search on the term
	thesis_language.each do |lan|   #0 ..n
	standard_language = "unfound"
	    standard_language = get_standard_language(lan.titleize)#capitalise first letter
		if standard_language!= "unfound"
			thesis.language+=[standard_language]
		end
	end	
	
	#dc.keyword (formerly subject, as existing ones from migration are free text not lookup
	thesis_subject = []
	doc.xpath("//foxml:datastream[@ID='DC']/foxml:datastreamVersion[@ID='#{currentVersion}']/foxml:xmlContent/oai_dc:dc/dc:subject/text()",ns).each do |s|
	thesis_subject.push(s.to_s)
	end
	thesis_subject.each do |s|
		thesis.keyword+=[s]   #TODO::THIS WAS ADDED TO FEDORA AS DC.RELATION NOT DC(OR DC11).SUBJECT!!!
	end	
	#dc11.subject??? not required for migration - see above
	
	
	#rights.
	#rights holder 0...1
	#checked data on dlib. all have the same rights statement and url cited, so this should work fine, as everything else is rights holders
=begin
	thesis_rightsholder = []	doc.xpath("//foxml:datastream[@ID='DC']/foxml:datastreamVersion[@ID='#{currentVersion}']/foxml:xmlContent/oai_dc:dc/dc:rights/text()[not(contains(.,'http')) and not (contains(.,'licenses')) ]",ns).each do |r|
	thesis_rightsholder.push(r)
	end
	puts "looked for rights holder"
	thesis_rightsholder.each do |r|
		thesis.rights_holder = r.to_s 
	end	
=end


   thesis_rightsholder = doc.xpath("//foxml:datastream[@ID='DC']/foxml:datastreamVersion[@ID='#{currentVersion}']/foxml:xmlContent/oai_dc:dc/dc:rights/text()[not(contains(.,'http')) and not (contains(.,'licenses')) ]",ns).to_s
   puts "read in thesis_rights_holder " + thesis_rightsholder
   if thesis_rightsholder.length > 0
	thesis.rights_holder=[thesis_rightsholder] 
    puts "thesis.rights_holder is now " + thesis.rights_holder[0].to_s	
   end

	#license  set a default which will be overwritten if one is found. its the url, not the statement. use licenses.yml not rights_statement.yml
	#For full york list see https://dlib.york.ac.uk/yodl/app/home/licences. edit in rights.yml
	defaultLicence = "http://dlib.york.ac.uk/licences#yorkrestricted"
	thesis_rights = defaultLicence
	thesis_rights = doc.xpath("//foxml:datastream[@ID='DC']/foxml:datastreamVersion[@ID='#{currentVersion}']/foxml:xmlContent/oai_dc:dc/dc:rights/text()[contains(.,'http')]",ns).to_s
	
	newrights =  get_standard_rights(thesis_rights)#  all theses currently York restricted 	
		if newrights.length > 0
		thesis_rights = newrights
			thesis.rights=[thesis_rights]			
		end	
	
	
	#rdf:type is boilerplate.dont need to add this 
	thesis.permissions = [Hydra::AccessControls::Permission.new({:name=> "public", :type=>"group", :access=>"read"}), Hydra::AccessControls::Permission.new({:name=>"ps552@york.ac.uk", :type=> "person", :access => "edit"})]
	thesis.depositor = "ps552@york.ac.uk"
	
	#save	
	thesis.save!
	id = thesis.id
	puts "thesis id was " +id 
	#put in collection	
	col = Object::Collection.find(parentcol.to_s)	
	puts "id of col was:" +col.id
	puts "got collection ok " + col.title[0].to_s
	col.members << thesis  
	col.save!
	
	# see https://github.com/pulibrary/plum/blob/master/app/jobs/ingest_mets_job.rb#L54 and https://github.com/pulibrary/plum/blob/master/lib/tasks/ingest_mets.rake#L3-L4
	users = Object::User.all #otherwise it will use one of the included modules
	user = users[0]	
	mfset.title = ["THESIS_MAIN"]	#needs to be same label as content file in foxml 
	mfset.permissions = [Hydra::AccessControls::Permission.new({:name=> "public", :type=>"group", :access=>"read"}), Hydra::AccessControls::Permission.new({:name=>"ps552@york.ac.uk", :type=> "person", :access => "edit"})]
	mfset.depositor = "ps552@york.ac.uk"
		
	#read content file
	#contentfile = open("/vagrant/files_to_test/testpdf.pdf")
	puts "just before creating content, pdf loc used is " + localpdfloc.to_s
	#contentfile = open(newpdfloc) #at present content has to sit on same server. could in real application probably get by sftp
	contentfile = open(localpdfloc) #ie '/vagrant/files_to_test/filename'
	
	puts "opened the content file" 
	
	#make filesetactor  
#http://www.rubydoc.info/gems/curation_concerns/1.0.0/CurationConcerns/Actors/FileSetActor
	actor = CurationConcerns::Actors::FileSetActor.new(mfset, user)
	#essential metadata and content are created in this order	
	#below section temp commented out as not working
=begin
     
	actor.create_metadata(thesis)#name of object its to be added to  
	puts "created metadata" 
	actor.create_content(contentfile, relation = 'original_file' )
	puts "created content"
=end   
	mfset.save!

   thesis.mainfile << mfset	   #assume this also sets mainfile_ids[]
end

end #end of class
