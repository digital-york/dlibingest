# Generated by curation_concerns:models:install
class FileSet < Dlibhydra::FileSet #ActiveFedora::Base
  include ::CurationConcerns::FileSetBehavior
  include Hydra::Derivatives

  #contains 'content'
  attr_accessor :mime_type

  def create_derivatives(filename)
    parent_object = self.parent

    # if parent object exists, then derivatives generation logic depends on the parent model and the mime type
    if parent_object.present?
      parent_model_name = parent_object.class.to_s

      case parent_model_name
        when 'ExamPaper', 'Thesis', 'Journal Article'
          logger.info 'No need to generate derivatives for ' + parent_model_name
        else
          logger.info "Generating of derivatives not yet implemented for " + parent_model_name
      end
    else # the derivatives generation logic only depends on the mime type (the default CC implementation)
      case mime_type
        when 'application/pdf'
          PdfDerivatives.create(filename, outputs: [{ label: :thumb, size: "100x100>" }])
        when 'audio/wav'
          AudioDerivatives.create(self, source: :original_file, outputs: [{ label: :mp3, format: 'mp3', url: "#{uri}/mp3" }, { label: :ogg, format: 'ogg', url: "#{uri}/ogg" }])
        when 'video/avi'
          VideoDerivatives.create(filename, outputs: [{ label: :mp4, format: 'mp4'}, { label: :webm, format: 'webm'}])
        when 'image/png', 'image/jpg'
          ImageDerivatives.create(self, source: :original_file,
                                  outputs: [
                                      { label: :medium, size: "300x300>", url: "#{uri}/medium" },
                                      { label: :thumb, size: "100x100>", url: "#{uri}/thumb" }])
        when 'application/vnd.ms-powerpoint'
          DocumentDerivatives.create(filename, outputs[{ label: :preservation, format: 'pptx' }, { label: :access, format: 'pdf' }, { label: :thumnail, format: 'jpg' }])
        when 'image/tiff'
          Jpeg2kDerivatives.create(filename, outputs: [{ label: :service, resize: "3600x3600>" }])
      end
    end


  end


  self.human_readable_type = 'FileSet'

  # might need an indexer?
end
